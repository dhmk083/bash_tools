#!/bin/env python

import re
import os
import sys
import signal
import pathlib
import argparse
import subprocess

signal.signal(signal.SIGINT, lambda sig, frame: sys.exit())

TEXT_LIKE = {7,8,9,10,12,13,27} | set(range(0x20, 0x100)) - {0x7f}
TEXT_MAP = [x in TEXT_LIKE for x in range(256)]

def decode_file(f, b):
    N = 1024
    raw = f.read(N)
    ts = sum((TEXT_MAP[x] for x in raw))
    maybe_text = ts / N > 0.8

    if not b and not maybe_text: return

    f.seek(0)
    return f.read().decode(errors='replace')

def colored(s, n):
    return f'\x1b[3{n}m{s}\x1b[0m'

def to_git_bash_path(p):
    parts = list(p.parts)
    
    if p.drive:
        parts[0] = f'/{p.drive[:-1].lower()}'

    return '/'.join(parts)

p = argparse.ArgumentParser()
p.add_argument('dir', nargs='?', default='.')
p.add_argument('regex')
p.add_argument('-f', help='search files instead of text', action='store_true')
p.add_argument('-d', help='search dirs instead of text', action='store_true')
p.add_argument('-b', help='search text in binary files', action='store_true')
p.add_argument('-p', help='test whole file\'s path instead of its name', action='store_true')
p.add_argument('-r', help='recursive', action='store_true')
p.add_argument('-i', help='ignore-case', action='store_true')
p.add_argument('-0', help='null-terminated lines for -f and -d', dest='eol', action='store_const', const='\0', default='\n')
p.add_argument('--include', help='search only in these files')
p.add_argument('--exclude', help='don\'t search in these files')
p.add_argument('--command', help='include only files for which `COMMAND $path` returns zero exit-code')

args = p.parse_args()

if args.command and not args.f:
    raise p.error('--command requires -f')

text_mode = not (args.f or args.d)

flags = re.I if args.i else 0
reg = re.compile(args.regex, flags)

if args.include:
    include_reg = re.compile(args.include)

if args.exclude:
    exclude_reg = re.compile(args.exclude)

for top, dirs, files in os.walk(args.dir):
    root = pathlib.PurePath(top)

    entries = (
        (dirs if args.d else []) +
        (files if args.f or text_mode else [])
    )

    for name in entries:
        real_path = root / name
        path = to_git_bash_path(real_path)
        file_reg_str = path if args.p else name

        if args.include:
            if not include_reg.search(file_reg_str):
                continue

        if args.exclude:
            if exclude_reg.search(file_reg_str):
                continue

        # slightly tested (maybe remove?)
        if args.command:
            if subprocess.run(
                f'{args.command} {path}', 
                stdout=subprocess.DEVNULL, 
                stderr=subprocess.DEVNULL
            ).returncode:
                continue

        if not text_mode:
            if reg.search(file_reg_str):
                print(path, end=args.eol)

        if text_mode:
            try:
                with open(real_path, 'rb') as file:
                    text = decode_file(file, args.b)
                    if not text: continue

                    for i, l in enumerate(text.split('\n')):
                        m = reg.search(l)
                        if not m: continue
                            
                        l = l.rstrip()
                        start, end = m.span()

                        hi = max(0, start - 100)
                        ti = min(len(l), end + 100)

                        head = l[hi:start].lstrip()
                        mid = l[start:end]
                        tail = l[end:ti].rstrip()

                        if hi > 0:
                            head = '...' + head

                        if ti < len(l):
                            tail = tail + '...'

                        print(f'{colored(path, 3)}:{colored(i + 1, 2)}:{head}{colored(mid, 6)}{tail}')
            except Exception as e:
                print(f'{colored(path, 3)}:{colored(e, 1)}', file=sys.stderr)

    if not args.r: break